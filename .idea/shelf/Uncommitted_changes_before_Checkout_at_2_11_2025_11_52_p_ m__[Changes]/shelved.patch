Index: main/client2.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import socket\r\nimport sys\r\nimport re\r\n\r\n\r\nclass FTPClient:\r\n    def __init__(self, host, port):\r\n        self.host = host\r\n        self.port = port\r\n        self.control_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        self.control_socket.connect((self.host, self.port))\r\n        self.receive_response()  # Recibir mensaje de bienvenida\r\n\r\n    def receive_response(self):\r\n        response = self.control_socket.recv(4096).decode('utf-8')\r\n        print(response, end='')\r\n        return response\r\n\r\n    def send_command(self, command):\r\n        self.control_socket.send((command + '\\r\\n').encode('utf-8'))\r\n        return self.receive_response()\r\n\r\n    def login(self, username, password):\r\n        user_response = self.send_command(f'USER {username}')\r\n        pass_response = self.send_command(f'PASS {password}')\r\n        return user_response, pass_response\r\n\r\n    def pasv(self):\r\n        response = self.send_command('PASV')\r\n        if \"227\" in response:  # Respuesta de modo pasivo\r\n            # Extraer la dirección IP y el puerto de la respuesta\r\n            ip_port = re.search(r'\\((\\d+,\\d+,\\d+,\\d+,\\d+,\\d+)\\)', response).group(1)\r\n            ip_parts = list(map(int, ip_port.split(',')))\r\n            ip = '.'.join(map(str, ip_parts[:4]))\r\n            port = (ip_parts[4] << 8) + ip_parts[5]\r\n            return ip, port\r\n        else:\r\n            raise Exception(\"Error al entrar en modo PASV.\")\r\n\r\n    def list_files(self):\r\n        ip, port = self.pasv()\r\n        data_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        data_socket.connect((ip, port))\r\n        list_response = self.send_command('LIST')\r\n        data = data_socket.recv(4096).decode('utf-8')\r\n        data_socket.close()\r\n        print(data)\r\n        return list_response, data\r\n\r\n    def retr(self, filename):\r\n        ip, port = self.pasv()\r\n        data_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        data_socket.connect((ip, port))\r\n        retr_response = self.send_command(f'RETR {filename}')\r\n        with open(filename, 'wb') as file:\r\n            while True:\r\n                data = data_socket.recv(4096)\r\n                if not data:\r\n                    break\r\n                file.write(data)\r\n        data_socket.close()\r\n        print(f\"Archivo '{filename}' descargado correctamente.\")\r\n        return retr_response\r\n\r\n    def print_working_directory(self):\r\n        response = self.send_command('PWD')\r\n        if \"257\" in response:  # Respuesta exitosa de PWD\r\n            print(response)\r\n            return response\r\n        else:\r\n            raise Exception(\"Error al obtener el directorio actual.\")\r\n\r\n    def change_working_directory(self, directory):\r\n        response = self.send_command(f'CWD {directory}')\r\n        if \"250\" in response:  # Respuesta exitosa de CWD\r\n            print(f\"Directorio cambiado a '{directory}'.\")\r\n            return response\r\n        else:\r\n            raise Exception(f\"Error al cambiar al directorio '{directory}'.\")\r\n\r\n    def rename(self, from_name, to_name):\r\n        rnfr_response = self.send_command(f'RNFR {from_name}')\r\n        if \"350\" in rnfr_response:  # Respuesta exitosa de RNFR\r\n            rnto_response = self.send_command(f'RNTO {to_name}')\r\n            if \"250\" in rnto_response:  # Respuesta exitosa de RNTO\r\n                print(f\"Archivo renombrado de '{from_name}' a '{to_name}'.\")\r\n            else:\r\n                raise Exception(f\"Error al renombrar el archivo a '{to_name}'.\")\r\n        else:\r\n            raise Exception(f\"Error al renombrar el archivo desde '{from_name}'.\")\r\n        return rnfr_response, rnto_response\r\n\r\n    def make_directory(self, directory):\r\n        response = self.send_command(f'MKD {directory}')\r\n        if \"257\" in response:  # Respuesta exitosa de MKD\r\n            print(f\"Directorio '{directory}' creado correctamente.\")\r\n        else:\r\n            raise Exception(f\"Error al crear el directorio '{directory}'.\")\r\n        return response\r\n\r\n    def delete_file(self, filename):\r\n        response = self.send_command(f'DELE {filename}')\r\n        if \"250\" in response:  # Respuesta exitosa de DELE\r\n            print(f\"Archivo '{filename}' eliminado correctamente.\")\r\n        else:\r\n            raise Exception(f\"Error al eliminar el archivo '{filename}'.\")\r\n        return response\r\n\r\n    def stor(self, local_filepath, remote_filename):\r\n        ip, port = self.pasv()\r\n        data_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        data_socket.connect((ip, port))\r\n        stor_response = self.send_command(f'STOR {remote_filename}')\r\n        with open(local_filepath, 'rb') as file:\r\n            while True:\r\n                data = file.read(4096)\r\n                if not data:\r\n                    break\r\n                data_socket.sendall(data)\r\n        data_socket.close()\r\n        final_response = self.receive_response()\r\n        if \"226\" in final_response or \"250\" in final_response:\r\n            print(f\"Archivo '{local_filepath}' subido como '{remote_filename}' correctamente.\")\r\n        else:\r\n            raise Exception(f\"Error al subir el archivo '{local_filepath}'.\")\r\n        return stor_response, final_response\r\n\r\n    def remove_directory(self, directory):\r\n        response = self.send_command(f'RMD {directory}')\r\n        if \"250\" in response:  # Respuesta exitosa de RMD\r\n            print(f\"Directorio '{directory}' eliminado correctamente.\")\r\n        else:\r\n            raise Exception(f\"Error al eliminar el directorio '{directory}'.\")\r\n        return response\r\n\r\n    def quit(self):\r\n        response = self.send_command('QUIT')\r\n        self.control_socket.close()\r\n        print(\"Conexión cerrada.\")\r\n        return response\r\n\r\ndef manage_requests(client, command, arg1, arg2):\r\n    try:\r\n        if command == \"LIST\":\r\n            list_response, data = client.list_files()\r\n            print(list_response, data)\r\n        elif command == \"DELE\":\r\n            if not arg1:\r\n                print(\"Falta el argumento requerido: -a para el comando DELE\")\r\n                return\r\n            dele_response = client.delete_file(arg1)\r\n            print(dele_response)\r\n        elif command == \"STOR\":\r\n            if not arg1 or not arg2:\r\n                print(\"Faltan los argumentos requeridos: -a (archivo local) y -b (nombre remoto) para el comando STOR\")\r\n                return\r\n            stor_response, final_response = client.stor(arg1, arg2)\r\n            print(stor_response, final_response)\r\n\r\n        elif command == \"RETR\":\r\n            if not arg1:\r\n                print(\"Falta el argumento requerido: -a para el comando RETR\")\r\n                return\r\n            retr_response = client.retr(arg1)\r\n            print(retr_response)\r\n        elif command == \"PWD\":\r\n            pwd_response = client.print_working_directory()\r\n            print(pwd_response)\r\n        elif command == \"CWD\":\r\n            if not arg1:\r\n                print(\"Falta el argumento requerido: -a para el comando CWD\")\r\n                return\r\n            cwd_response = client.change_working_directory(arg1)\r\n            print(cwd_response)\r\n        elif command == \"RNFR\":\r\n            if not arg1 or not arg2:\r\n                print(\"Faltan los argumentos requeridos: -a y -b para el comando RNFR\")\r\n                return\r\n            rnfr_response, rnto_response = client.rename(arg1, arg2)\r\n            print(rnfr_response, rnto_response)\r\n        elif command == \"MKD\":\r\n            if not arg1:\r\n                print(\"Falta el argumento requerido: -a para el comando MKD\")\r\n                return\r\n            mkd_response = client.make_directory(arg1)\r\n            print(mkd_response)\r\n        elif command == \"RMD\":\r\n            if not arg1:\r\n                print(\"Falta el argumento requerido: -a para el comando RMD\")\r\n                return\r\n            rmd_response = client.remove_directory(arg1)\r\n            print(rmd_response)\r\n        elif command:\r\n            print(f\"Comando '{command}' no reconocido.\")\r\n        else:\r\n            print(\"No se proporcionó ningún comando.\")\r\n    except Exception as e:\r\n        print(f\"Error durante la ejecución del comando '{command}': {str(e)}\")\r\n\r\n    quit_response = client.quit()\r\n    print(quit_response)\r\n\r\ndef main():\r\n    cant_args = {\r\n        \"LIST\": 0,\r\n        \"DELE\": 1,\r\n        \"STOR\": 2,\r\n        \"RETR\": 1,\r\n        \"PWD\": 0,\r\n        \"CWD\": 1,\r\n        \"RNFR\": 2,\r\n        \"MKD\": 1,\r\n        \"RMD\": 1\r\n    }\r\n\r\n    print(\"Bienvenido, para salir inserte 'exit'\")\r\n    host = input(\"Inserte el host: \")\r\n    if host == \"exit\":\r\n        return\r\n    port = int(input(\"Inserte el puerto: \"))\r\n    if port == \"exit\":\r\n        return\r\n    user = input(\"Inserte el usuario: \")\r\n    if user == \"exit\":\r\n        return\r\n    password = input(\"Inserte la contraseña: \")\r\n    if password == \"exit\":\r\n        return\r\n    while True:\r\n        command = input(\"Inserte un comando (DELE, LIST, STOR, RETR, PWD, CWD, RNFR, MKD, RMD): \")\r\n        if command == \"exit\":\r\n            break\r\n        if command not in cant_args:\r\n            print(\"Comando no reconocido\")\r\n            continue\r\n\r\n        args = [\"\",\"\"]\r\n        for i in range(cant_args[command]):\r\n            arg = input(f\"Inserte el argumento {i+1}: \")\r\n            if arg == \"exit\":\r\n                break\r\n            args[i] = arg\r\n\r\n        client = FTPClient(host, port)\r\n        user_response, pass_response = client.login(user, password)\r\n        manage_requests(client, command, args[0], args[1])\r\n\r\n\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    main()
===================================================================
diff --git a/main/client2.py b/main/client2.py
--- a/main/client2.py	(revision f6eab3492ec0949eb00ee7dcc887c9314a37b5d9)
+++ b/main/client2.py	(date 1739335858444)
@@ -43,7 +43,7 @@
         data_socket.connect((ip, port))
         list_response = self.send_command('LIST')
         data = data_socket.recv(4096).decode('utf-8')
-        data_socket.close()
+
         print(data)
         return list_response, data
 
@@ -58,7 +58,7 @@
                 if not data:
                     break
                 file.write(data)
-        data_socket.close()
+
         print(f"Archivo '{filename}' descargado correctamente.")
         return retr_response
 
@@ -117,7 +117,7 @@
                 if not data:
                     break
                 data_socket.sendall(data)
-        data_socket.close()
+
         final_response = self.receive_response()
         if "226" in final_response or "250" in final_response:
             print(f"Archivo '{local_filepath}' subido como '{remote_filename}' correctamente.")
