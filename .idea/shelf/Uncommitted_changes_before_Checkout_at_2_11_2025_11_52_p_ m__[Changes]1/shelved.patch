Index: main/server.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import socket\r\nimport os\r\nimport threading\r\n\r\n\r\nclass FTPServer:\r\n    def __init__(self, host, port):\r\n        self.host = host\r\n        self.port = port\r\n        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)\r\n        self.server_socket.bind((self.host, self.port))\r\n        self.server_socket.listen(5)\r\n        print(f\"Servidor FTP escuchando en {self.host}:{self.port}\")\r\n\r\n    def handle_client(self, client_socket):\r\n        client_socket.send(\"220 Bienvenido al Servidor FTP\\r\\n\".encode('utf-8'))\r\n        while True:\r\n            data = client_socket.recv(1024).decode('utf-8').strip()\r\n            if not data:\r\n                break\r\n\r\n            command = data.split(' ')[0].upper()\r\n            if command == 'USER':\r\n                client_socket.send(\"331 Nombre de usuario correcto, se requiere contraseña\\r\\n\".encode('utf-8'))\r\n            elif command == 'PASS':\r\n                client_socket.send(\"230 Usuario autenticado, proceda\\r\\n\".encode('utf-8'))\r\n            elif command == 'LIST':\r\n                files = os.listdir('.')\r\n                client_socket.send(\"150 Listado de directorio en proceso\\r\\n\".encode('utf-8'))\r\n                client_socket.send(('\\r\\n'.join(files) + '\\r\\n').encode('utf-8'))\r\n                client_socket.send(\"226 Listado de directorio completado\\r\\n\".encode('utf-8'))\r\n            elif command == 'QUIT':\r\n                client_socket.send(\"221 Adios\\r\\n\".encode('utf-8'))\r\n                break\r\n            else:\r\n                client_socket.send(\"500 Comando desconocido\\r\\n\".encode('utf-8'))\r\n\r\n        client_socket.close()\r\n\r\n    def run(self):\r\n        while True:\r\n            client_socket, addr = self.server_socket.accept()\r\n            print(f\"Conexión aceptada de {addr}\")\r\n            client_thread = threading.Thread(target=self.handle_client, args=(client_socket,))\r\n            client_thread.start()\r\n\r\n\r\nif __name__ == \"__main__\":\r\n    server = FTPServer('0.0.0.0', 21)\r\n    server.run()\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/main/server.py b/main/server.py
--- a/main/server.py	(revision f6eab3492ec0949eb00ee7dcc887c9314a37b5d9)
+++ b/main/server.py	(date 1739332619204)
@@ -19,7 +19,9 @@
             if not data:
                 break
 
-            command = data.split(' ')[0].upper()
+            command, *args = data.split(' ')
+            command = command.upper()
+
             if command == 'USER':
                 client_socket.send("331 Nombre de usuario correcto, se requiere contraseña\r\n".encode('utf-8'))
             elif command == 'PASS':
@@ -29,6 +31,65 @@
                 client_socket.send("150 Listado de directorio en proceso\r\n".encode('utf-8'))
                 client_socket.send(('\r\n'.join(files) + '\r\n').encode('utf-8'))
                 client_socket.send("226 Listado de directorio completado\r\n".encode('utf-8'))
+            elif command == 'RETR':
+                filename = args[0]
+                if os.path.isfile(filename):
+                    client_socket.send("150 Apertura de conexión de datos para transferencia\r\n".encode('utf-8'))
+                    with open(filename, 'rb') as file:
+                        client_socket.sendfile(file)
+                    client_socket.send("226 Transferencia de archivo completada\r\n".encode('utf-8'))
+                else:
+                    client_socket.send("550 Archivo no encontrado\r\n".encode('utf-8'))
+            elif command == 'STOR':
+                filename = args[0]
+                client_socket.send("150 Apertura de conexión de datos para transferencia\r\n".encode('utf-8'))
+                with open(filename, 'wb') as file:
+                    while True:
+                        data = client_socket.recv(1024)
+                        if not data:
+                            break
+                        file.write(data)
+                client_socket.send("226 Transferencia de archivo completada\r\n".encode('utf-8'))
+            elif command == 'PWD':
+                client_socket.send(f'257 "{os.getcwd()}"\r\n'.encode('utf-8'))
+            elif command == 'CWD':
+                directory = args[0]
+                try:
+                    os.chdir(directory)
+                    client_socket.send("250 Cambio de directorio exitoso\r\n".encode('utf-8'))
+                except FileNotFoundError:
+                    client_socket.send("550 Directorio no encontrado\r\n".encode('utf-8'))
+            elif command == 'MKD':
+                directory = args[0]
+                try:
+                    os.mkdir(directory)
+                    client_socket.send(f'257 "{directory}" creado\r\n'.encode('utf-8'))
+                except FileExistsError:
+                    client_socket.send("550 El directorio ya existe\r\n".encode('utf-8'))
+            elif command == 'RMD':
+                directory = args[0]
+                try:
+                    os.rmdir(directory)
+                    client_socket.send("250 Directorio eliminado\r\n".encode('utf-8'))
+                except FileNotFoundError:
+                    client_socket.send("550 Directorio no encontrado\r\n".encode('utf-8'))
+            elif command == 'DELE':
+                filename = args[0]
+                try:
+                    os.remove(filename)
+                    client_socket.send("250 Archivo eliminado\r\n".encode('utf-8'))
+                except FileNotFoundError:
+                    client_socket.send("550 Archivo no encontrado\r\n".encode('utf-8'))
+            elif command == 'RNFR':
+                self.rename_from = args[0]
+                client_socket.send("350 Listo para recibir el nuevo nombre\r\n".encode('utf-8'))
+            elif command == 'RNTO':
+                new_name = args[0]
+                try:
+                    os.rename(self.rename_from, new_name)
+                    client_socket.send("250 Cambio de nombre exitoso\r\n".encode('utf-8'))
+                except FileNotFoundError:
+                    client_socket.send("550 Archivo no encontrado\r\n".encode('utf-8'))
             elif command == 'QUIT':
                 client_socket.send("221 Adios\r\n".encode('utf-8'))
                 break
@@ -46,5 +107,5 @@
 
 
 if __name__ == "__main__":
-    server = FTPServer('0.0.0.0', 21)
-    server.run()
+    server = FTPServer('127.0.0.1', 21)
+    server.run()
\ No newline at end of file
Index: main/server2.py
===================================================================
diff --git a/main/server2.py b/main/server2.py
new file mode 100644
--- /dev/null	(date 1739334676076)
+++ b/main/server2.py	(date 1739334676076)
@@ -0,0 +1,115 @@
+import socket
+import os
+import re
+import threading
+
+class FTPServer:
+    def __init__(self, host, port):
+        self.host = host
+        self.port = port
+        self.server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+        self.server_socket.bind((self.host, self.port))
+        self.server_socket.listen(5)
+        self.current_directory = os.getcwd()
+        print(f"Servidor FTP escuchando en {self.host}:{self.port}")
+
+    def start(self):
+        while True:
+            client_socket, client_address = self.server_socket.accept()
+            print(f"Conexión establecida con {client_address}")
+            threading.Thread(target=self.handle_client, args=(client_socket,)).start()
+
+    def handle_client(self, client_socket):
+        client_socket.send(f"220 Servidor FTP listo.\r\n")
+        while True:
+            try:
+                command = client_socket.recv(4096).decode('utf-8').strip()
+                if not command:
+                    break
+
+                if command.startswith("USER"):
+                    client_socket.send(f"331 Usuario OK, necesita contraseña.")
+                elif command.startswith("PASS"):
+                    client_socket.send(f"230 Usuario autenticado.\r\n")
+                elif command.startswith("PASV"):
+                    ip = self.host.replace('.', ',')
+                    port = 20000  # Puerto arbitrario para el modo pasivo
+                    client_socket.send(f"227 Entering Passive Mode ({ip},{port >> 8},{port & 0xff}).\r\n".encode('utf-8'))
+                elif command.startswith("LIST"):
+                    client_socket.send(f"150 Abriendo conexión de datos.\r\n")
+                    data_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+                    data_socket.connect((self.host, 20000))
+                    files = "\r\n".join(os.listdir(self.current_directory))
+                    data_socket.send(files.encode('utf-8'))
+                    data_socket.close()
+                    client_socket.send(f"226 Transferencia completada.\r\n")
+                elif command.startswith("RETR"):
+                    filename = command.split(' ')[1]
+                    if os.path.exists(filename):
+                        client_socket.send(f"150 Abriendo conexión de datos.\r\n")
+                        data_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+                        data_socket.connect((self.host, 20000))
+                        with open(filename, 'rb') as file:
+                            data_socket.sendfile(file)
+                        data_socket.close()
+                        client_socket.send(f"226 Transferencia completada.\r\n")
+                    else:
+                        client_socket.send(f"550 Archivo no encontrado.\r\n")
+                elif command.startswith("STOR"):
+                    filename = command.split(' ')[1]
+                    client_socket.send(f"150 Abriendo conexión de datos.\r\n")
+                    data_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
+                    data_socket.connect((self.host, 20000))
+                    with open(filename, 'wb') as file:
+                        while True:
+                            data = data_socket.recv(4096)
+                            if not data:
+                                break
+                            file.write(data)
+                    data_socket.close()
+                    client_socket.send(f"226 Transferencia completada.\r\n")
+                elif command.startswith("PWD"):
+                    client_socket.send(f"257 \"{self.current_directory}\"\r\n".encode('utf-8'))
+                elif command.startswith("CWD"):
+                    directory = command.split(' ')[1]
+                    if os.path.isdir(directory):
+                        self.current_directory = directory
+                        client_socket.send(f"250 Directorio cambiado.\r\n")
+                    else:
+                        client_socket.send(f"550 Directorio no encontrado.\r\n")
+                elif command.startswith("RNFR"):
+                    client_socket.send(f"350 Esperando nuevo nombre.\r\n")
+                elif command.startswith("RNTO"):
+                    client_socket.send(f"250 Archivo renombrado.\r\n")
+                elif command.startswith("MKD"):
+                    directory = command.split(' ')[1]
+                    os.mkdir(directory)
+                    client_socket.send(f"257 Directorio creado.\r\n")
+                elif command.startswith("DELE"):
+                    filename = command.split(' ')[1]
+                    if os.path.exists(filename):
+                        os.remove(filename)
+                        client_socket.send(f"250 Archivo eliminado.\r\n")
+                    else:
+                        client_socket.send(f"550 Archivo no encontrado.\r\n")
+                elif command.startswith("RMD"):
+                    directory = command.split(' ')[1]
+                    if os.path.isdir(directory):
+                        os.rmdir(directory)
+                        client_socket.send(f"250 Directorio eliminado.\r\n")
+                    else:
+                        client_socket.send(f"550 Directorio no encontrado.\r\n")
+                elif command.startswith("QUIT"):
+                    client_socket.send(f"221 Adios.\r\n")
+                    client_socket.close()
+                    break
+                else:
+                    client_socket.send(f"500 Comando no reconocido.\r\n")
+            except Exception as e:
+                print(f"Error: {e}")
+                client_socket.send(f"500 Error en el servidor.\r\n")
+                break
+
+if __name__ == "__main__":
+    server = FTPServer("127.0.0.1", 2121)
+    server.start()
\ No newline at end of file
